A quick-n-dirty markup reformatter.
===================================

1. Read babylon-text markup from file into tree in memory.
2. Read reformatting rules into memory.
3. Apply the reformatting rules to the tree in memory.
4. Output the result.



Reformatting
============

1. There are two types of variables: implicit variables and explicit
   variables. Implicit variables are created for each tree by the
   tree processor itself (for example, the variable $(_body_) refers to
   the body of the tree). Explicit variables are created using the
   name=value format in the beginning of a tree.

2. Variables map to the name/value pair stored in a tree:
   Source:
      [tagname name1=value1 name2=red some text goes here]
   Macro:
      tagname
      <div class=$(name1)>
         <font color=$(name2)>
            $(_body_)
         </font>
      </div>

   $(name1) is replaced with 'value1'
   $(name2) is replaced with 'red'
   $(_body_) is replaced with the text 'some text goes here'

   Since the tree is processed recursively, the inner trees resolve to
   plain text, possibly via a macro transformation, and this plain text
   is then passed to the higher trees until the entire tree is flattened
   into a single long string of text, all produced by macros.

3. The variables starting with underscores are reserved for use by the
   system. This allows the addition of new implicit variables without
   conflicting with any variables a user has already chosen. Same with
   tags that start with an underscore - reserved for the system itself.

4. It is necessary to provide conditional macros; this is because if a
   tree fails to set an explicit variable that a macro needs we can only
   error out, but in some cases it is preferable to make the usage of the
   variable optional:
   Source:
      [tagname name2=red some text goes here]
   Macro:
      tagname
      <div class=$(name1)>       <== results in '<div class=>'
         <font color=$(name2)>
            $(_body_)
         </font>
      </div>

   The above resulted (highlighted on the right) is not what was wanted.
   Usually (and the reason for writing this reformatted) we want the
   text processor to throw an error about an unknown variable; other times
   it is desirable to simply leave out the entire 'class=' text.

   Example: <div $(_optional_ class=$(name1))>

   TODO: Figure out how to proceed with this!

5. Since it is cumbersome to manually specify each and every explicit
   variable, it is not a bad idea to search for variables upwards in the
   tree until we find a match (WARNING: this can cause all sorts of
   errors, maybe make it produce a warning if it does so?)
   Source:
      [tag1 name1=red some text goes here
         [tag2 tag two text goes here]
         some more text in tag1]
   Macro:
      tag2
      <div bgcolor=light-$(name1)>     <== resolves to 'red'
         <font color=dark-$(name1)>    <== resolves to 'red'
            $(_body_)
         </font>
      </div>

   The above uses of explicit variables won't find one defined for
   tag2, but it will find a $(name1) in tag2's parent.

   TODO: Is this a good idea? This is going to result in inheritance of
   variables from included files that the user knows nothing about! Maybe
   make it explicit in some way?

6. Linking must be possible from the source.
   [section name="My New Section"
      ...]
   [link target="My New Section" link text goes here]

   It's perfectly possible to generate IDs for references at processing
   time, because we can always scan the tree to find the target, then
   update the target with a refcount. During output, we output a target ID
   when refcount is non-zero.

7. There needs to be some way of collecting variables so that repeated
   uses are easy.
   Source method:
      [ToC for-each=chapter
         [tr [td [link target=$(chapter.ref) $(chapter.name)]]]]

   Macro method:
      ToC
      <table>
         $(_group_ chapter)
         <tr><td>$(_name_)</td><td>$(_ref_)</tr>
      </table>

   TODO: I don't like this - it is non-regular and inconsistent.

8. We could perhaps use (an optional) tagging/grouping input file that
   contains a list of tags/groups for particular tags. For example,
   placing tags in a group lets the author control how that group is
   produced. Simply, let the author put a single tag into multiple groups.
   Groups file:
      chapter = ToC     # Tag chapter as a ToC element,
      chapter = link    # that must be always linkable.

   TODO: Cannot really see a use for this!

